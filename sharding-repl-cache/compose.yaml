name: mongo-sharding-repl
services:
  # mongodb1:
  #   container_name: mongodb1
  #   image: dh-mirror.gitverse.ru/mongo:latest
  #   volumes:
  #     - mongodb1_data_container:/data/db

  #сервер конфигурации
  configSrv:
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: configSrv
    restart: always
    ports:
      - "27016:27016"
    networks:
      app-network:
        ipv4_address: 174.17.0.6
    volumes:
      - config-data:/data/db
    command:
      [
        "--configsvr",
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27016"
      ] 
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #Шард-1 БД-1
  shard1_db1:
    image: mongo:latest
    container_name: shard1_db1
    restart: always
    ports:
      - "27018:27018"
    networks:
      app-network:
        ipv4_address: 174.17.0.9
    volumes:
      - shard1_db1-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard1",
        "--bind_ip_all",
        "--port",
        "27018"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #Шард-1 БД-2
  shard1_db2:
    image: mongo:latest
    container_name: shard1_db2
    restart: always
    ports:
      - "27019:27019"
    networks:
      app-network:
        ipv4_address: 174.17.0.10
    volumes:
      - shard1_db2-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard1",
        "--bind_ip_all",
        "--port",
        "27019"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #Шард-1 БД-3
  shard1_db3:
    image: mongo:latest
    container_name: shard1_db3
    restart: always
    ports:
      - "27020:27020"
    networks:
      app-network:
        ipv4_address: 174.17.0.11
    volumes:
      - shard1_db3-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard1",
        "--bind_ip_all",
        "--port",
        "27020"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s    

  #Шард-2 БД-1
  shard2_db1:
    image: mongo:latest
    container_name: shard2_db1
    restart: always
    ports:
      - "27021:27021"
    networks:
      app-network:
        ipv4_address: 174.17.0.12
    volumes:
      - shard2_db1-data:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard2", #название реплики
        "--bind_ip_all", 
        "--port",
        "27021"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #Шард-2 БД-2
  shard2_db2:
    image: mongo:latest
    container_name: shard2_db2
    restart: always
    ports:
      - "27022:27022"
    networks:
      app-network:
        ipv4_address: 174.17.0.13
    volumes:
      - shard2_db2-data:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard2", #название реплики
        "--bind_ip_all", 
        "--port",
        "27022"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #Шард-2 БД-3
  shard2_db3:
    image: mongo:latest
    container_name: shard2_db3
    restart: always
    ports:
      - "27023:27023"
    networks:
      app-network:
        ipv4_address: 174.17.0.14
    volumes:
      - shard2_db3-data:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard2", #название реплики
        "--bind_ip_all", 
        "--port",
        "27023"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s    

  #роутер
  mongos_router:
    image: mongo:latest
    container_name: mongos_router
    restart: always
    ports:
      - "27017:27017"
    networks:
      app-network:
        ipv4_address: 174.17.0.7
    command:
      [
        "mongos", #обычная mongo в режиме роутера
        "--configdb", 
        "config_server/configSrv:27016", #передача данных сервера конфигурации
        "--bind_ip_all",
        "--port",
        "27017"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s    


  pymongo_api:
    container_name: pymongo_api
    build: 
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - mongos_router
    ports:
      - 8080:8080
    environment:
      MONGODB_URL: "mongodb://mongos_router"
      MONGODB_DATABASE_NAME: "somedb"
    networks:
      app-network:
        ipv4_address: 174.17.0.25  

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 174.17.0.0/16

volumes:
  config-data:
  shard1_db1-data:
  shard1_db2-data:
  shard1_db3-data:
  shard2_db1-data:
  shard2_db2-data:
  shard2_db3-data: